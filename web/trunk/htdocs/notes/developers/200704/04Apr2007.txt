Minutes OBI Developer's Call, 4 April 2007

Present: Ally (Minutes), Trish, Bjoern, Tina, Daniel, Chris, Jennifer, 
Helen, Liju, Alan

Triggers, presented by Alan (triggers.html attachment in his email to obi-devel)
+ Most of the "action" is below realizable_entity
+ this was a case where we had a several-part volunteer selection process 
for a clinical trial
+ At the top is volunteer enlistment. Temporal order of the parts was
not modeled except in one place
+ Hard to figure out if things go in process or plan, so for now has
put everything in plan  
+ Absolute and relative time triggers
+ relate plan to process with the realization_of association, and 
should trigger the Volunteer Enrollment part of the plan
+ In BFO, realizable_entities will realize as types of process.
+ Not sure how to model time at this stage
+ Another example: when does the adverse event protocol get triggered?
Class: http://obi.sourceforge.net/ontology/OBI.owl#ClinicalTrialAdverseEffectWatch
An adverse_event_trigger in which the protocol ReportAdverseEvent is to be acted on when triggered
(and adverse_event_trigger (whatToTrigger some ReportAdverseEvent))
Subject of: whenToTrigger, plannedTimeInterval, whenOccurs, part_of, has_part, realized_as, whatToTrigger
Object of: realization_of, part_of, has_part, whatToTrigger

+ You can realize a plan without having a named process (creating an unnamed process class, in essence)
+ Alan has no explicit Protocol Applications set up in his example
+ The anonymous class becomes the protocol application.
+ Bjoern: how can a plan monitor a process? In the act of monitoring, it becomes a process, doesn't it?
Why don't we just talk about processes? It is the realization that monitors the process, not the plan itself
  + Alan - Maybe should create a marked-up example of a protocol application to give you an idea.
  + Alan will think about this.
+ Liju: where is time_trigger?
  + Alan: plan -> instruction_trigger -> time_trigger
               -> protocol
  + Therefore time_trigger can be realized. Compares it to an alarm clock going off.
  + Liju: AfterFiftyPeopleEnrolled is a plan (it is another child of instruction_trigger. This is a little confusing
  + Alan: instruction_trigger is "set your alarm for 7am". The realization is that the clock is running, and eventually,
  at 7am, it rings. 
  + Alan: You need to identify the process to monitor, and what you're going to do when it happens.
  + Alan: realization 1: monitoring process; realization 2: the plan to be acted upon when the reqs are met
  + Helen: you could use an "invokes" association with a trigger for #2 in the previous line.
  + Helen: worried about long-term consequences of such a (relatively) complicated design.
+ Alan: for adverse event triggers and others, you need to be aware that there are parallel processes going on.
He thinks someone should write an alternative to his idea, so that we can get an idea of what other options might be
out there. Should use Alan's example so that there can be a direct comparison.
+ Action Item: Liju will try to do this alternative example.
  
Status report of PA branch: Bjoern
+ sent email this morning with status
+ mailing list, wiki pages with different use cases discussed so far, weekly TCs,
members include Active participants: Alan, Allyson, Bjoern, Frank, Jay, Matt + Visitors:
Trish, Philippe, Elizabeth Wu (Alzforum)
+ main problem was that documentation created was not good enough for outsiders to understand
+ plan versus process problem: wording that signals intent should be in plan, not in process
  + eg washing cells: rinse cells with the intent of cleaning 
  + vocab used for describing processes comes from the same place as vocab for plan
+ It may be that we put all things under plan, and just have the processes as unnamed
realizations of the plans
+ Jennifer: Clinical Trials people will simply try to be informed by OBI / harmonize
with OBI until either there's a huge dispute (when they'll come back to us), or until they
get too far ahead.
+ Granularity: It is always possible to split a protocol_application into smaller parts.
These may or may not be interesting. Example: dna_sequencing. Is
the input DNA, or cells? If cells, then there must be a part which is a
dna_extraction protocol application. The dna_extraction can be one of
several different protocol_application which can again be split into sub
protocol_applications. By making this explicit, we will allow the use of
fine grained or high level annotations, and users can determine the level of
granularity they want.
  + Alan: you can always write larger and larger expressions that are essentially
  unnamed classes. Should have a recipe for people to let them know when they should
  get more granular, and how to do it.
  + Alan: Plans vs PA are still causing consternation at various levels, so we should
  just keep going for now, and make final resolution at a later date
+ How to connect various sub-protocol_applications? If a protocol_application is comprising 
several other ones, those have to be ordered and connected. See the trigger example from Alan.
The connection needs to be more than just temporal. Usually, things are pretty linear.
+ Relationships:
 process;
       has_duration,
       has_participant independent_continuant,
       has_location site (which has qualities, e.g. temperature)

 protocol_application;
		has_input  (has_participant at t=t_start with role = input_role)
		has_output (has_participant at t=t_end with role = output_role)
		utilizes_device = has participant device and process_part realizes the
                               device function
		utilizes_reagent = has participant with role = reagent_role
+ Helen: when is a reagent not an output?
+ Bjoern: input and output are reserved for the independent variables, the things you're
really interested in.
+ Bjoern: the point of the PA is to transform input into output	 
+ We haven't received term submissions 
  + Trish - you have received ~2 from Ryan.
+ PA branch should get more terms from Trish on Friday, and Invitrogen later on
+ Bjoern: PA wants to organize things based on what their inputs and outputs are. Therefore we need
terms like "cell" as a part of biomaterial.
+ Want to create restrictions NOW like "has_input cell" - can still do this with the branched files.
  + anything outside your branch will be read-only
+ Trish: restrictions that are currently in the OBI file are just confusing, so before splitting the file we
could delete them, putting an editor_note in about why they were deleted. (Disjoints are already gone). Drop
all non-BFO object properties.
+ Liju will do that last cleanup before splitting.
