<?xml version="1.0" encoding="UTF-8"?>
<project name="build" default="help" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant">
  <tstamp>
    <format property="date" pattern="yyyy-MM-dd"/>
  </tstamp>

  <loadproperties srcFile="config.properties" />
  <property name="src" value="src/main/java" />
  <property name="resources" value="src/main/resources" />
  <property name="dist" value="dist" />
  <property name="test" value="src/test/java" />
  <property name="target" value="target" />
  <property name="release" value="release" />
  <property name="classes" value="${target}/classes" />
  <property name="javadoc" value="${target}/javadoc" />
  <property name="test-classes" value="${target}/test-classes" />
  <property name="test-results" value="${target}/test-results" />
  <property name="test-reports" value="${target}/test-reports" />
  <property name="lib" value="lib" />
  <property name="doap_file" value="${dist}/doap.xml" />

  <!-- HELP -->
  <target name="help" description="Print project help">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-projecthelp" />
      <arg value="-buildfile" />
      <arg value="${ant.file}" />
    </java>
  </target>

  <!-- INIT -->
  <target name="init" depends="" description="Prepare for build">
    <path id="classpath">
      <fileset dir="${lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!-- CLEAN -->
  <target name="clean" depends="" description="Clean all non-source files">
    <echo message="Cleaning non-source directories in ${basedir}" />
    <delete dir="${dist}" />
    <delete dir="${release}" />
    <delete dir="${target}" />
  </target>

  <!-- DEPS -->
  <!-- Requires Apache Ivy to be installed for Ant. -->
  <target name="deps" description="Retrieve dependencies with Apache Ivy">
    <ivy:retrieve />
  </target>

  <!-- COMPILE -->
  <target name="compile" depends="init" description="Compile the project">
    <mkdir dir="${target}" />
    <mkdir dir="${classes}" />
    <javac destdir="${classes}" classpathref="classpath"
      optimize="false" debug="true"
      includeantruntime="false">
      <src path="${src}" />
    </javac>
  </target>

  <!-- DIFF -->
  <!-- This will use SVN to get a copy of the last committed version
       of obi.owl, save it to obi_last_commit.owl, then diff it
       against the current obi.owl and print a report. -->
  <target name="diff" depends="compile"
    description="List the changes to obi.owl since last commit">
    <exec executable="svn" dir="${ontology_path}/branches"
      output="${ontology_path}/branches/obi_last_commit.owl">
      <arg value="cat"/>
      <arg value="obi.owl"/>
    </exec>
    <java classname="obi.Differ">
      <classpath>
          <path refid="classpath"/>
          <path location="${classes}"/>
      </classpath>
      <arg value="${ontology_path}/branches/obi_last_commit.owl"/>
      <arg value="${ontology_path}/branches/obi.owl"/>
      <arg value="${dist}/obi.diff"/>
    </java>
    <delete file="${ontology_path}/branches/obi_last_commit.owl"/>
  </target>

  <!-- DOAP -->
  <target name="doap" depends=""
    description="Generate 'Description of a Project' File">
    <copy file="${ontology_path}/${doap_path}" tofile="${doap_file}" overwrite="yes"/>

    <!-- This should get the current SVN revision number. -->
    <exec outputproperty="revision" executable="svnversion">
      <arg line="${ontology_path}"/>
      <redirector>
        <outputfilterchain>
          <tokenfilter>
            <replaceregex pattern="^(\d+).*" replace="\1" flags="g"/>
          </tokenfilter>
        </outputfilterchain>
      </redirector>
    </exec>
    <echo message="${release_name} ${date}"/>
    <echo message="SVN Revision: ${revision}"/>
    <replace file="${doap_file}" token="__SVN_REVISION_GOES_HERE__" value="${revision}"/>
    <replace file="${doap_file}" token="__VERSION_GOES_HERE__" value="${date}"/>
    <replace file="${doap_file}" token="__PRETTY_NAME_GOES_HERE__" value="${release_name} ${date}"/>
  </target>

  <!-- ASSIGN -->
  <target name="assign-ids" depends="compile"
    description="Assign OBI IDs in the development file">
    <java classname="obi.Assigner">
      <classpath>
          <path refid="classpath"/>
          <path location="${classes}"/>
      </classpath>
      <arg value="${ontology_path}/${obi_path}"/>
    </java>
  </target>

  <!-- PIPELINE MACRO -->
  <!-- This macro performs various common steps for working with the OWL files:
       updating metadata, generating a report spreadsheet, and adding comments.
       Task-specific work is done before anything else. -->
  <macrodef name="pipeline">
    <attribute name="name"/>
    <element name="first-jobs" implicit="yes"/>
    <sequential>
      <echo message="Building ${dist}/@{name}.owl"/>
      <first-jobs/>
      <java classname="obi.Metadator">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${ontology_path}/${obi_path}"/>
        <arg value="${doap_file}"/>
        <arg value="${date}"/>
        <arg value="http://purl.obolibrary.org/obo/obi/${date}/@{name}.owl"/>
        <arg value="${dist}/@{name}.owl"/>
      </java>
      <java classname="obi.Reporter">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${dist}/@{name}.owl"/>
        <arg value="${dist}/@{name}.tsv"/>
        <arg value="${dist}/@{name}.txt"/>
      </java>
      <copy file="${dist}/@{name}.owl" tofile="${dist}/@{name}_temp.owl"
        verbose="false"/>
      <java classname="obi.Commenter">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${dist}/@{name}_temp.owl"/>
        <arg value="${dist}/@{name}.tsv"/>
        <arg value="${dist}/@{name}.owl"/>
      </java>
      <delete file="${dist}/@{name}_temp.owl" verbose="false"/>
      <echo message="Built ${dist}/@{name}.owl"/>
    </sequential>
  </macrodef>

  <!-- BUILD -->
  <target name="build" depends="compile, doap"
    description="Merge OBI into a single OWL file and run checks">
    <pipeline name="obi">
      <java classname="obi.Builder">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${ontology_path}/${obi_path}"/>
        <arg value="${dist}/obi_merged.owl"/>
        <arg value="${dist}/obi.owl"/>
        <arg value="${dist}/obi_warnings.tsv"/>
      </java>
    </pipeline>
  </target>

  <!-- UPDATE -->
  <target name="update-terms" depends="build"
    description="Check and update all terms">
    <java classname="obi.TermUpdater">
      <classpath>
          <path refid="classpath"/>
          <path location="${classes}"/>
      </classpath>
      <arg value="${dist}/obi_merged.owl"/>
      <arg value="${dist}/warnings.tsv"/>
      <arg value="${dist}/obi.owl"/>
    </java>
  </target>

  <!-- REASON -->
  <target name="reason" depends="build"
    description="Reason over the built OBI and save the results">
    <pipeline name="obi">
      <java classname="obi.Reasoner">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${dist}/obi.owl"/>
        <arg value="${dist}/obi.owl"/>
      </java>
    </pipeline>
  </target>

  <!-- REPORT -->
  <target name="report" depends="compile" description="Report on OBI">
    <java classname="obi.Reporter">
      <classpath>
          <path refid="classpath"/>
          <path location="${classes}"/>
      </classpath>
      <arg value="${dist}/obi.owl"/>
      <arg value="${dist}/obi.tsv"/>
      <arg value="${dist}/obi.txt"/>
    </java>
  </target>

  <!-- CORE -->
  <target name="core" depends="build" description="Extract the Core">
    <pipeline name="obi_core">
      <java classname="obi.Extractor">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${dist}/obi.owl"/> <!-- TODO: Check this!! -->
        <arg value="${core_iris}"/>
        <arg value="${dist}/obi_core.owl"/>
        <arg value="${base_iri}/obi_core.owl"/>
      </java>
    </pipeline>
  </target>

  <!-- IEDB -->
  <target name="iedb" depends="build" description="Build the IEDB view of OBI">
    <pipeline name="obi_iedb">
      <java classname="obi.ViewMaker">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${dist}/obi.owl"/>
        <arg value="${dist}/obi_iedb.owl"/>
        <arg value="http://purl.obolibrary.org/obo/OBI_9991118"/>
      </java>
    </pipeline>
  </target>

  <!-- ISA -->
  <target name="isa" depends="build" description="Build the ISA view of OBI">
    <pipeline name="obi_isa">
      <java classname="obi.ViewMaker">
        <classpath>
            <path refid="classpath"/>
            <path location="${classes}"/>
        </classpath>
        <arg value="${dist}/obi.owl"/>
        <arg value="${dist}/obi_isa.owl"/>
        <arg value="http://purl.obolibrary.org/obo/OBI_0001847"/>
      </java>
    </pipeline>
  </target>

  <!-- RELEASE -->
  <target name="release" depends="reason, core, iedb, isa"
    description="Build all OBI files for release">
    <delete dir="${release}"/>
    <mkdir  dir="${release}"/>
    <copy todir="${release}">
      <fileset dir="${dist}">
        <include name="obi.owl"/>
        <include name="obi_core.owl"/>
        <include name="obi_iedb.owl"/>
        <include name="obi_isa.owl"/>
      </fileset>
    </copy>

    <mkdir  dir="${release}/docs"/>
    <copy todir="${release}/docs">
      <fileset dir="${dist}">
        <include name="obi.tsv"/>
        <include name="obi.txt"/>
        <include name="obi_core.tsv"/>
        <include name="obi_core.txt"/>
        <include name="obi_iedb.tsv"/>
        <include name="obi_iedb.txt"/>
        <include name="obi_isa.tsv"/>
        <include name="obi_isa.txt"/>
        <include name="warnings.tsv"/>
      </fileset>
    </copy>

    <mkdir  dir="${release}/branches"/>
    <copy todir="${release}/branches/">
      <fileset dir="${ontology_path}/branches">
        <include name="catalog-v001.xml"/>
        <include name="doap.template"/>
        <include name="external-byhand.owl"/>
        <include name="obi.owl"/>
        <include name="OntoFox_inputs/*.txt"/>
        <include name="OntoFox_outputs/*.owl"/>
      </fileset>
    </copy>

    <mkdir  dir="${release}/external/bfo2-alan"/>
    <copy todir="${release}/external/bfo2-alan">
      <fileset dir="${ontology_path}/external/bfo2-alan" includes="**"/>
    </copy>

    <mkdir  dir="${release}/external/iao-bfo2"/>
    <copy todir="${release}/external/iao-bfo2">
      <fileset dir="${ontology_path}/external/iao-bfo2" includes="**"/>
    </copy>

    <copy todir="${release}/external/">
      <fileset dir="${ontology_path}/external/">
        <include name="protege-dc.owl"/>
      </fileset>
    </copy>

    <echo message="Release directory created in '${release}'"/>
    <echo message="You may want to copy lists of new terms to '${release}/docs'"/>
  </target>

  <!-- TEST -->
  <target name="test" depends="compile" description="Run all OBI tests">
    <mkdir dir="${target}/tests" />
    <java classname="obi.Tester">
      <classpath>
          <path refid="classpath"/>
          <path location="${resources}"/>
          <path location="${classes}"/>
      </classpath>
      <arg value="../../tests"/>
      <arg value="${target}/tests"/>
    </java>
  </target>

  <!-- EXPERIMENT -->
  <target name="experiment" depends="compile" description="Test files in the 'experiments' dir">
    <mkdir dir="${target}/tests" />
    <java classname="obi.Tester">
      <classpath>
          <path refid="classpath"/>
          <path location="${resources}"/>
          <path location="${classes}"/>
      </classpath>
      <arg value="experiments"/>
      <arg value="${target}/experiments"/>
    </java>
  </target>

  <!-- ALL -->
  <target name="all" depends="clean, init, compile, build" description="Run the complete workflow">
    <echo message="OBI built!" />
  </target>

</project>
