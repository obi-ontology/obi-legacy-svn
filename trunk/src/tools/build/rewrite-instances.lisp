(defun rewrite-instance-file (uri-rewrites in-file out-file ontology-url &rest prefixes)
  (let ((table (make-hash-table :test 'equal)))
    (with-open-file (f uri-rewrites)
      (loop for line = (read-line f nil :eof)
	 until (eq line :eof)
	 for (from to) = (car (all-matches line "(.*)=>(.*)$" 1 2))
	 do (setf (gethash from table) to)))
    (let ((in-model (#"createDefaultModel" 'modelfactory))
	  (out-model (#"createDefaultModel" 'modelfactory)))
      (#"setNsPrefix" out-model "owl" (uri-full !owl:))
      (#"setNsPrefix" out-model "xsd" (uri-full !xsd:))
      (#"setNsPrefix" out-model "rdfs" (uri-full !rdfs:))
      (#"setNsPrefix" out-model "rdf" (uri-full !rdf:))
      (#"setNsPrefix" out-model "obo" "http://purl.obolibrary.org/obo/")
      (#"read" in-model
	       (new 'bufferedinputstream
		    (#"getInputStream" (#"openConnection" (new 'java.net.url (format nil "file://~a" (namestring (truename in-file)))))))
	       ontology-url)
      (loop for (abbrev expansion) in prefixes do
	   (#"setNsPrefix" in-model abbrev expansion))
      (loop with iterator = (#"listStatements" in-model)
	 while (#"hasNext" iterator)
	 for statement = (#"next" iterator)
	 for subject = (#"getSubject" statement)
	 for object = (#"getObject" statement)
	 for replace = nil
	 for replacement = nil
	 do
	 (when (and (#"isResource" subject) (not (#"isAnon" subject)))
	   (let ((replacement
		  (gethash  (#"toString" (#"getURI" subject)) table)))
	     (when replacement
;	       (format t "subject replacement ~a => ~a~%" (#"toString" (#"getURI" subject)) replacement)
	       (setq subject (#"createResource" out-model replacement)
		     replace t
		))))
	 (when (and (#"isResource" object) (not (#"isAnon" object)) (not (#"isLiteral" object)))
	   (let ((replacement (gethash (#"toString" (#"getURI" object)) table)))
	     (when replacement
;	       (format t "object replacement ~a => ~a~%" (#"toString" (#"getURI" object)) replacement)
	       (setq object (#"createResource" out-model replacement)
		     replace t))))
	   (if replace 
	       (add-jena-triple out-model subject (#"getPredicate" statement) object)
	       (#"add" out-model statement))
	   )
      (let ((sw (new 'StringWriter)))
	(#"write" out-model sw "RDF/XML-ABBREV")
	(with-open-file (f out-file :direction :output :if-does-not-exist :create :if-exists :supersede)
	  (write-string (#"toString" sw) f))
	t))))


(defun add-jena-triple (model s property value)
  (let ((subject 
	 (cond ((stringp s)
		(#"createResource" model s))
	       ((uri-p s)
		(#"createResource" model (uri-full s)))
	       ((java-object-p s) s)
	       (t (error "subject: ~a" s))))
	(property (cond ((stringp property)
			 (#"getProperty" model property))
			((uri-p property)
			 (#"getProperty" model (uri-full property)))
			((java-object-p property) property)
			(t (error "property: ~a" s))))
	(value (cond ((and (consp value)
			   (eq (car value) :literal))
		      (make-jena-literal model (second value) (uri-full (third value)))
		      )
		     ((uri-p value)
		      (#"createResource" model (uri-full value)))
		     ((integerp value)
		      (#"createTypedLiteral" model value))
		     ((floatp value)
		      (#"createTypedLiteral" model value))
		     ((java-object-p value) value)
		     (t value))))
    (#"addProperty" subject property value)))